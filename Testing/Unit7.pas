// This unit is autogenerated. Do not edit it manually.
// Source: C:\Jeremy\GitHub\CPRSv33con\CPRS-chart\InfoPanel\PtInfoData.json
// Date: 4/25/2024 5:19:08 PM

unit Unit7;

interface

uses
  System.Classes, System.JSON.Serializers, System.Generics.Collections, System.JSON.Converters;

type
  TReturnData = class;
  TRequiredData = class;
  TPresentation = class;
  TSection = class;

  TJsonListConverterTReturnData = class(TJsonTypedListConverter<TReturnData>);
  TJsonListConverterTRequiredData = class(TJsonTypedListConverter<TRequiredData>);
  TJsonListConverterTPresentation = class(TJsonTypedListConverter<TPresentation>);
  TJsonListConverterTSection = class(TJsonTypedListConverter<TSection>);

  [JsonSerialize(TJsonMemberSerialization.Public)]
  TReturnData = class(TPersistent)
  private
    FdataName: string;
    Frequired: string;
  public
    property dataName: string read FdataName write FdataName;
    property required: string read Frequired write Frequired;
  end;

  [JsonSerialize(TJsonMemberSerialization.Public)]
  TTesting = class(TPersistent)
  private
    Fwhatever: Integer;
    Fzzz: Integer;
  public
    property whatever: Integer read Fwhatever write Fwhatever;
    property zzz: Integer read Fzzz write Fzzz;
  end;

  [JsonSerialize(TJsonMemberSerialization.Public)]
  TRequiredData = class(TPersistent)
  private
    FdataName: string;
    FerrorMessage: string;
    Frequired: Boolean;
    FreturnData: TObjectList<TReturnData>;
  public
    constructor Create;
    destructor Destroy; override;
    property dataName: string read FdataName write FdataName;
    property errorMessage: string read FerrorMessage write FerrorMessage;
    property required: Boolean read Frequired write Frequired;
    [JsonConverter(TJsonListConverterTReturnData)]
    property returnData: TObjectList<TReturnData> read FreturnData;
  end;

  [JsonSerialize(TJsonMemberSerialization.Public)]
  TGeneralParameters = class(TPersistent)
  private
    FcolorEnabled: Boolean;
    FdefaultColor: string;
    FimageIconEnabled: Boolean;
    FpanelTextAlignment: string;
    FprocessMouseClickWhenFloating: Boolean;
    FshowRefreshButton: Boolean;
    Ftesting: TTesting;
  public
    constructor Create;
    destructor Destroy; override;
    property colorEnabled: Boolean read FcolorEnabled write FcolorEnabled;
    property defaultColor: string read FdefaultColor write FdefaultColor;
    property imageIconEnabled: Boolean read FimageIconEnabled write FimageIconEnabled;
    property panelTextAlignment: string read FpanelTextAlignment write FpanelTextAlignment;
    property processMouseClickWhenFloating: Boolean read FprocessMouseClickWhenFloating write FprocessMouseClickWhenFloating;
    property showRefreshButton: Boolean read FshowRefreshButton write FshowRefreshButton;
    property testing: TTesting read Ftesting;
  end;

  [JsonSerialize(TJsonMemberSerialization.Public)]
  TPresentation = class(TPersistent)
  private
    FabbreviatedDisplayText: string;
    Faction: string;
    FcallDetailRPC: Boolean;
    Fcolor: string;
    FcreateNote: Boolean;
    FdetailText: string;
    Fdisabled: Boolean;
    FdisplayText: string;
    FimageIcon: string;
    Fname: string;
    FpanelId: string;
    FpopOut: string;
    FrequiredData: TObjectList<TRequiredData>;
    FsectionId: string;
    Furl: string;
  public
    constructor Create;
    destructor Destroy; override;
    property abbreviatedDisplayText: string read FabbreviatedDisplayText write FabbreviatedDisplayText;
    property action: string read Faction write Faction;
    property callDetailRPC: Boolean read FcallDetailRPC write FcallDetailRPC;
    property color: string read Fcolor write Fcolor;
    property createNote: Boolean read FcreateNote write FcreateNote;
    property detailText: string read FdetailText write FdetailText;
    property disabled: Boolean read Fdisabled write Fdisabled;
    property displayText: string read FdisplayText write FdisplayText;
    property imageIcon: string read FimageIcon write FimageIcon;
    property name: string read Fname write Fname;
    property panelId: string read FpanelId write FpanelId;
    property popOut: string read FpopOut write FpopOut;
    [JsonConverter(TJsonListConverterTRequiredData)]
    property requiredData: TObjectList<TRequiredData> read FrequiredData;
    property sectionId: string read FsectionId write FsectionId;
    property url: string read Furl write Furl;
  end;

  [JsonSerialize(TJsonMemberSerialization.Public)]
  TSection = class(TPersistent)
  private
    FabbreviatedDisplayText: string;
    Fcollapsible: Boolean;
    Fcolor: string;
    Fdisabled: Boolean;
    FdisplayText: string;
    FimageIcon: string;
    FisNational: Boolean;
    Fname: string;
    FpageID: Integer;
    FsectionId: string;
    Ftab: string;
  public
    property abbreviatedDisplayText: string read FabbreviatedDisplayText write FabbreviatedDisplayText;
    property collapsible: Boolean read Fcollapsible write Fcollapsible;
    property color: string read Fcolor write Fcolor;
    property disabled: Boolean read Fdisabled write Fdisabled;
    property displayText: string read FdisplayText write FdisplayText;
    property imageIcon: string read FimageIcon write FimageIcon;
    property isNational: Boolean read FisNational write FisNational;
    property name: string read Fname write Fname;
    property pageID: Integer read FpageID write FpageID;
    property sectionId: string read FsectionId write FsectionId;
    property tab: string read Ftab write Ftab;
  end;

  [JsonSerialize(TJsonMemberSerialization.Public)]
  TData = class(TPersistent)
  private
    FgeneralParameters: TGeneralParameters;
    FlastUpdated: Double;
    Fpresentation: TObjectList<TPresentation>;
    Fsections: TObjectList<TSection>;
  public
    constructor Create;
    destructor Destroy; override;
    property generalParameters: TGeneralParameters read FgeneralParameters;
    property lastUpdated: Double read FlastUpdated write FlastUpdated;
    [JsonConverter(TJsonListConverterTPresentation)]
    property presentation: TObjectList<TPresentation> read Fpresentation;
    [JsonConverter(TJsonListConverterTSection)]
    property sections: TObjectList<TSection> read Fsections;
  end;

implementation

uses
  System.SysUtils;

constructor TRequiredData.Create;
begin
  inherited Create;
  FreturnData := TObjectList<TReturnData>.Create(True);
end;

destructor TRequiredData.Destroy;
begin
  FreeAndNil(FreturnData);
  inherited Destroy;
end;

constructor TGeneralParameters.Create;
begin
  inherited Create;
  Ftesting := TTesting.Create;
end;

destructor TGeneralParameters.Destroy;
begin
  FreeAndNil(Ftesting);
  inherited Destroy;
end;

constructor TPresentation.Create;
begin
  inherited Create;
  FrequiredData := TObjectList<TRequiredData>.Create(True);
end;

destructor TPresentation.Destroy;
begin
  FreeAndNil(FrequiredData);
  inherited Destroy;
end;

constructor TData.Create;
begin
  inherited Create;
  FgeneralParameters := TGeneralParameters.Create;
  Fpresentation := TObjectList<TPresentation>.Create(True);
  Fsections := TObjectList<TSection>.Create(True);
end;

destructor TData.Destroy;
begin
  FreeAndNil(FgeneralParameters);
  FreeAndNil(Fpresentation);
  FreeAndNil(Fsections);
  inherited Destroy;
end;

initialization

  RegisterClass(TReturnData);
  RegisterClass(TTesting);
  RegisterClass(TRequiredData);
  RegisterClass(TGeneralParameters);
  RegisterClass(TPresentation);
  RegisterClass(TSection);
  RegisterClass(TData);

end.
